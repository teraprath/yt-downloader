import { videoInfo, Author, thumbnail, videoFormat } from '@distube/ytdl-core';
import * as stream from 'stream';

interface ConvertOptions {
    title?: string;
    itag?: number;
    url: string;
    directory?: string;
    ffmpegPath?: string;
    onDownloading?: (data: {
        percentage: number;
        size: number;
    }) => void;
}
interface MessageResult {
    message: string;
    error: boolean;
    videoInfo: videoInfo;
    pathfile: string;
}

declare function Video(options: ConvertOptions): Promise<MessageResult>;

declare function Audio(options: ConvertOptions): Promise<MessageResult>;

interface Options$1 extends Omit<ConvertOptions, 'onDownloading' | 'directory' | 'title'> {
}
declare function createStreamAudio(options: Options$1): Promise<stream.Readable>;

interface Options extends Omit<ConvertOptions, "onDownloading" | "directory" | "title"> {
}
declare function createStreamVideo(options: Options): Promise<stream.Readable>;

/**
 * @typedef {object} thumbnail
 * @property {string} url
 * @property {number} width
 * @property {number} height
 */
/**
 * @typedef {object} format
 * @property {number} audioBitrate
 * @property {number} audioQuality
 * @property {number} approxDurationMs
 * @property {string} container
 * @property {boolean} hasAudio
 * @property {boolean} hasVideo
 * @property {number} itag
 * @property {string} quality
 * @property {string} qualityLabel
 */
/**
 * @typedef {object} videoInfo
 * @property {string} title
 * @property {string} author
 * @property {number} lengthSeconds
 * @property {number} viewCount
 * @property {Array<format>} formats
 * @property {Array<format>} formatsAudio
 * @property {Array<format>} formatsVideo
 * @property {Array<thumbnail>} thumbnails
 */
/**
 * @param {string} url
 * @return {Promise<videoInfo>}
 * @memberof module:yt-converter
 */
interface Info {
    title: string;
    author: Author;
    lengthSeconds: string;
    viewCount: string;
    likes: number;
    averageRating: number;
    thumbnails: Array<thumbnail>;
    formats: Array<videoFormat>;
    formatsAudio: Array<videoFormat>;
    formatsVideo: Array<videoFormat>;
}
declare const getInfo: (url: any) => Promise<Info>;

export { Audio, Video, createStreamAudio, createStreamVideo, getInfo };
